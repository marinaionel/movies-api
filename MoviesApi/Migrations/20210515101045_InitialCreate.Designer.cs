// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesApi.Data;

namespace MoviesApi.Migrations
{
    [DbContext(typeof(MoviesContext))]
    [Migration("20210515101045_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MoviesApi.Core.Model.Director", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.HasKey("MovieId", "PersonId")
                        .HasName("directors_pk")
                        .IsClustered(false);

                    b.HasIndex("PersonId");

                    b.ToTable("directors", "moviesfile");
                });

            modelBuilder.Entity("MoviesApi.Core.Model.Movie", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<long?>("Year")
                        .HasColumnType("bigint")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("movies_pk")
                        .IsClustered(false);

                    b.HasIndex(new[] { "Id" }, "movies_id_uindex")
                        .IsUnique();

                    b.ToTable("movies", "moviesfile");
                });

            modelBuilder.Entity("MoviesApi.Core.Model.Person", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<long?>("Birth")
                        .HasColumnType("bigint")
                        .HasColumnName("birth");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("people_pk")
                        .IsClustered(false);

                    b.HasIndex(new[] { "Id" }, "people_id_uindex")
                        .IsUnique();

                    b.ToTable("people", "moviesfile");
                });

            modelBuilder.Entity("MoviesApi.Core.Model.Rating", b =>
                {
                    b.Property<float?>("AverageRating")
                        .HasColumnType("real")
                        .HasColumnName("rating");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.Property<int?>("Votes")
                        .HasColumnType("int")
                        .HasColumnName("votes");

                    b.HasIndex("MovieId");

                    b.ToTable("ratings", "moviesfile");
                });

            modelBuilder.Entity("MoviesApi.Core.Model.Star", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.HasKey("MovieId", "PersonId")
                        .HasName("stars_pk")
                        .IsClustered(false);

                    b.ToTable("stars", "moviesfile");
                });

            modelBuilder.Entity("MoviesApi.Core.Model.Director", b =>
                {
                    b.HasOne("MoviesApi.Core.Model.Movie", "Movie")
                        .WithMany("Directors")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("directors_movies_id_fk")
                        .IsRequired();

                    b.HasOne("MoviesApi.Core.Model.Person", "Person")
                        .WithMany("Directors")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("directors_people_id_fk")
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MoviesApi.Core.Model.Rating", b =>
                {
                    b.HasOne("MoviesApi.Core.Model.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .HasConstraintName("ratings_movies_id_fk");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MoviesApi.Core.Model.Star", b =>
                {
                    b.HasOne("MoviesApi.Core.Model.Movie", "Movie")
                        .WithMany("Stars")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("stars_movies_id_fk")
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MoviesApi.Core.Model.Movie", b =>
                {
                    b.Navigation("Directors");

                    b.Navigation("Stars");
                });

            modelBuilder.Entity("MoviesApi.Core.Model.Person", b =>
                {
                    b.Navigation("Directors");
                });
#pragma warning restore 612, 618
        }
    }
}
